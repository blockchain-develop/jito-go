// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: packet.proto

package jito_go

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PacketBatch struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Packets       []*Packet              `protobuf:"bytes,1,rep,name=packets,proto3" json:"packets,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PacketBatch) Reset() {
	*x = PacketBatch{}
	mi := &file_packet_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PacketBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PacketBatch) ProtoMessage() {}

func (x *PacketBatch) ProtoReflect() protoreflect.Message {
	mi := &file_packet_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PacketBatch.ProtoReflect.Descriptor instead.
func (*PacketBatch) Descriptor() ([]byte, []int) {
	return file_packet_proto_rawDescGZIP(), []int{0}
}

func (x *PacketBatch) GetPackets() []*Packet {
	if x != nil {
		return x.Packets
	}
	return nil
}

type Packet struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []byte                 `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Meta          *Meta                  `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Packet) Reset() {
	*x = Packet{}
	mi := &file_packet_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Packet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Packet) ProtoMessage() {}

func (x *Packet) ProtoReflect() protoreflect.Message {
	mi := &file_packet_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Packet.ProtoReflect.Descriptor instead.
func (*Packet) Descriptor() ([]byte, []int) {
	return file_packet_proto_rawDescGZIP(), []int{1}
}

func (x *Packet) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Packet) GetMeta() *Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

type Meta struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Size          uint64                 `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`
	Addr          string                 `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"`
	Port          uint32                 `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	Flags         *PacketFlags           `protobuf:"bytes,4,opt,name=flags,proto3" json:"flags,omitempty"`
	SenderStake   uint64                 `protobuf:"varint,5,opt,name=sender_stake,json=senderStake,proto3" json:"sender_stake,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Meta) Reset() {
	*x = Meta{}
	mi := &file_packet_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Meta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Meta) ProtoMessage() {}

func (x *Meta) ProtoReflect() protoreflect.Message {
	mi := &file_packet_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Meta.ProtoReflect.Descriptor instead.
func (*Meta) Descriptor() ([]byte, []int) {
	return file_packet_proto_rawDescGZIP(), []int{2}
}

func (x *Meta) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *Meta) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *Meta) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Meta) GetFlags() *PacketFlags {
	if x != nil {
		return x.Flags
	}
	return nil
}

func (x *Meta) GetSenderStake() uint64 {
	if x != nil {
		return x.SenderStake
	}
	return 0
}

type PacketFlags struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Discard        bool                   `protobuf:"varint,1,opt,name=discard,proto3" json:"discard,omitempty"`
	Forwarded      bool                   `protobuf:"varint,2,opt,name=forwarded,proto3" json:"forwarded,omitempty"`
	Repair         bool                   `protobuf:"varint,3,opt,name=repair,proto3" json:"repair,omitempty"`
	SimpleVoteTx   bool                   `protobuf:"varint,4,opt,name=simple_vote_tx,json=simpleVoteTx,proto3" json:"simple_vote_tx,omitempty"`
	TracerPacket   bool                   `protobuf:"varint,5,opt,name=tracer_packet,json=tracerPacket,proto3" json:"tracer_packet,omitempty"`
	FromStakedNode bool                   `protobuf:"varint,6,opt,name=from_staked_node,json=fromStakedNode,proto3" json:"from_staked_node,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *PacketFlags) Reset() {
	*x = PacketFlags{}
	mi := &file_packet_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PacketFlags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PacketFlags) ProtoMessage() {}

func (x *PacketFlags) ProtoReflect() protoreflect.Message {
	mi := &file_packet_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PacketFlags.ProtoReflect.Descriptor instead.
func (*PacketFlags) Descriptor() ([]byte, []int) {
	return file_packet_proto_rawDescGZIP(), []int{3}
}

func (x *PacketFlags) GetDiscard() bool {
	if x != nil {
		return x.Discard
	}
	return false
}

func (x *PacketFlags) GetForwarded() bool {
	if x != nil {
		return x.Forwarded
	}
	return false
}

func (x *PacketFlags) GetRepair() bool {
	if x != nil {
		return x.Repair
	}
	return false
}

func (x *PacketFlags) GetSimpleVoteTx() bool {
	if x != nil {
		return x.SimpleVoteTx
	}
	return false
}

func (x *PacketFlags) GetTracerPacket() bool {
	if x != nil {
		return x.TracerPacket
	}
	return false
}

func (x *PacketFlags) GetFromStakedNode() bool {
	if x != nil {
		return x.FromStakedNode
	}
	return false
}

var File_packet_proto protoreflect.FileDescriptor

const file_packet_proto_rawDesc = "" +
	"\n" +
	"\fpacket.proto\x12\x06packet\"7\n" +
	"\vPacketBatch\x12(\n" +
	"\apackets\x18\x01 \x03(\v2\x0e.packet.PacketR\apackets\">\n" +
	"\x06Packet\x12\x12\n" +
	"\x04data\x18\x01 \x01(\fR\x04data\x12 \n" +
	"\x04meta\x18\x02 \x01(\v2\f.packet.MetaR\x04meta\"\x90\x01\n" +
	"\x04Meta\x12\x12\n" +
	"\x04size\x18\x01 \x01(\x04R\x04size\x12\x12\n" +
	"\x04addr\x18\x02 \x01(\tR\x04addr\x12\x12\n" +
	"\x04port\x18\x03 \x01(\rR\x04port\x12)\n" +
	"\x05flags\x18\x04 \x01(\v2\x13.packet.PacketFlagsR\x05flags\x12!\n" +
	"\fsender_stake\x18\x05 \x01(\x04R\vsenderStake\"\xd2\x01\n" +
	"\vPacketFlags\x12\x18\n" +
	"\adiscard\x18\x01 \x01(\bR\adiscard\x12\x1c\n" +
	"\tforwarded\x18\x02 \x01(\bR\tforwarded\x12\x16\n" +
	"\x06repair\x18\x03 \x01(\bR\x06repair\x12$\n" +
	"\x0esimple_vote_tx\x18\x04 \x01(\bR\fsimpleVoteTx\x12#\n" +
	"\rtracer_packet\x18\x05 \x01(\bR\ftracerPacket\x12(\n" +
	"\x10from_staked_node\x18\x06 \x01(\bR\x0efromStakedNodeb\x06proto3"

var (
	file_packet_proto_rawDescOnce sync.Once
	file_packet_proto_rawDescData []byte
)

func file_packet_proto_rawDescGZIP() []byte {
	file_packet_proto_rawDescOnce.Do(func() {
		file_packet_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_packet_proto_rawDesc), len(file_packet_proto_rawDesc)))
	})
	return file_packet_proto_rawDescData
}

var file_packet_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_packet_proto_goTypes = []any{
	(*PacketBatch)(nil), // 0: packet.PacketBatch
	(*Packet)(nil),      // 1: packet.Packet
	(*Meta)(nil),        // 2: packet.Meta
	(*PacketFlags)(nil), // 3: packet.PacketFlags
}
var file_packet_proto_depIdxs = []int32{
	1, // 0: packet.PacketBatch.packets:type_name -> packet.Packet
	2, // 1: packet.Packet.meta:type_name -> packet.Meta
	3, // 2: packet.Meta.flags:type_name -> packet.PacketFlags
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_packet_proto_init() }
func file_packet_proto_init() {
	if File_packet_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_packet_proto_rawDesc), len(file_packet_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_packet_proto_goTypes,
		DependencyIndexes: file_packet_proto_depIdxs,
		MessageInfos:      file_packet_proto_msgTypes,
	}.Build()
	File_packet_proto = out.File
	file_packet_proto_goTypes = nil
	file_packet_proto_depIdxs = nil
}
